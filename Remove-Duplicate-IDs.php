<?phprequire( 'GCMFunctions.php' );if ($_SERVER['REQUEST_METHOD'] !== 'POST') {    die("Wrong Method");}
// Create DB ConnectioncreateDBConnection();$blogURL = $_POST['blogurl'];
// See if this Blog URL is registered.$app_details = get_application_details_by_blog_url($blogURL);if($app_details == null){	die("Application not registered with Hanu-Droid");}// Get all registered devices$app_id = $app_details['ID'];
// Get Instance IDs that have more than 1 Reg IDs$instance_id_list = get_instance_ids_with_multiple_reg_ids($app_id);//var_dump($instance_id_list);if(count($instance_id_list) > 0){		// Get the Duplicate Reg IDs	$duplicate_reg_ids = get_duplicate_reg_ids($app_id,$instance_id_list);	//var_dump($duplicate_reg_ids);	$delete_id_list = array();	// Print Output	foreach($instance_id_list as $iid){				echo "<hr />";		echo "Processing IID : " . $iid;				$reg_id_bundle = $duplicate_reg_ids[$iid];				$index = 0;		foreach($reg_id_bundle as $reg_id_details){						if($index == 0){				// Keep Index 0				echo "<br>ID : " . $reg_id_details['ID'] . " Created on : " . $reg_id_details['CreatedAt'] 					. " App Version: " . $reg_id_details['AppVersion'] . " is latest";			}			else{				// Remove other Indexes				echo "<br>ID : " . $reg_id_details['ID'] . " Created on : " . $reg_id_details['CreatedAt'] 					. " App Version: " . $reg_id_details['AppVersion'] . " is must be deleted";									$delete_id_list[] = $reg_id_details['ID'];			}						$index++;		}			}	//var_dump($delete_id_list);	$delete = $_POST['delete'];	if($delete == "Yes"){				delete_duplicate_ids($delete_id_list);		echo "<hr/><hr/> ++++++++ Duplicate IDs Deleted ++++++++ <hr/><hr/>";	}	}else{	echo "<hr/><hr/> ++++++++ No Duplicatte IDs found ++++++++ <hr/><hr/>";}// List of Functionsfunction get_instance_ids_with_multiple_reg_ids($app_id){		global $db;		$id_list = array();		$query = "select InstanceID, c from 			( SELECT InstanceID, count(*) as c FROM `hanu_devices` WHERE AppID = $app_id AND Platform LIKE '%Windows%' GROUP BY InstanceID ) as temp 			where c > 1 AND InstanceID <> ''";				$stmt = $db->prepare($query);	$sqlVars = array();	if (!$stmt->execute($sqlVars)){	}	else{		while($row = $stmt->fetch(PDO::FETCH_ASSOC)){			$id_list[] = $row['InstanceID'];		}		}		$stmt = null;	return $id_list;}function get_duplicate_reg_ids($app_id,$instance_id_list){		global $db;	$id_list = array();		$iid_bundles = array_chunk($instance_id_list, 20);		foreach($iid_bundles as $iid_bundle){				$in = join(',', array_fill(0, count($iid_bundle), '?'));				/*		// For Android		$query = "SELECT * FROM hanu_devices WHERE InstanceID IN ($in) AND AppID = $app_id 				AND Platform = 'Android' ORDER BY CAST(AppVersion AS UNSIGNED) DESC, ID DESC";				$statement = $db->prepare($query);				if (!$statement->execute($iid_bundle)){			echo "<br>== Error in SQL ==";		}		else{			while($row = $statement->fetch(PDO::FETCH_ASSOC)){				$id_list[$row['InstanceID']][] = $row;			}			}		//*/				// For Windows		$query = "SELECT * FROM hanu_devices WHERE InstanceID IN ($in) AND AppID = $app_id 				AND Platform LIKE '%Windows%' ORDER BY AppVersion DESC, ID DESC";				$statement = $db->prepare($query);				if (!$statement->execute($iid_bundle)){			echo "<br>== Error in SQL ==";		}		else{			while($row = $statement->fetch(PDO::FETCH_ASSOC)){				$id_list[$row['InstanceID']][] = $row;			}			}			}		return $id_list;}function delete_duplicate_ids($delete_id_list){		global $db;	$id_list = array();		$delete_id_bundles = array_chunk($delete_id_list, 50);		foreach($delete_id_bundles as $delete_id_bundle){				$in = join(',', array_fill(0, count($delete_id_bundle), '?'));		$query = "DELETE FROM hanu_devices WHERE ID IN ($in)";		$statement = $db->prepare($query);				if (!$statement->execute($delete_id_bundle)){			echo "<br>== Error in Delete SQL ==";		}		else{		}		}}
?>